// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gofound.proto

package gofoundpd

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QueryResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryResponseMultiError, or
// nil if none found.
func (m *QueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for Total

	// no validation rules for PageCount

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryResponseValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryResponseMultiError(errors)
	}

	return nil
}

// QueryResponseMultiError is an error wrapping multiple validation errors
// returned by QueryResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResponseMultiError) AllErrors() []error { return m }

// QueryResponseValidationError is the validation error returned by
// QueryResponse.Validate if the designated constraints aren't met.
type QueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResponseValidationError) ErrorName() string { return "QueryResponseValidationError" }

// Error satisfies the builtin error interface
func (e QueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResponseValidationError{}

// Validate checks the field values on ResponseDoc with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseDoc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseDoc with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseDocMultiError, or
// nil if none found.
func (m *ResponseDoc) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseDoc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseDocValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseDocValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseDocValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OriginalText

	// no validation rules for Score

	if len(errors) > 0 {
		return ResponseDocMultiError(errors)
	}

	return nil
}

// ResponseDocMultiError is an error wrapping multiple validation errors
// returned by ResponseDoc.ValidateAll() if the designated constraints aren't met.
type ResponseDocMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseDocMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseDocMultiError) AllErrors() []error { return m }

// ResponseDocValidationError is the validation error returned by
// ResponseDoc.Validate if the designated constraints aren't met.
type ResponseDocValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseDocValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseDocValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseDocValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseDocValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseDocValidationError) ErrorName() string { return "ResponseDocValidationError" }

// Error satisfies the builtin error interface
func (e ResponseDocValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseDoc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseDocValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseDocValidationError{}

// Validate checks the field values on QueryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryRequestMultiError, or
// nil if none found.
func (m *QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetQuery()) < 1 {
		err := QueryRequestValidationError{
			field:  "Query",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrder()) < 1 {
		err := QueryRequestValidationError{
			field:  "Order",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ScoreExp

	if m.GetPage() < 1 {
		err := QueryRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 1 || val > 1000 {
		err := QueryRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHighlight()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryRequestValidationError{
					field:  "Highlight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryRequestValidationError{
					field:  "Highlight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHighlight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryRequestValidationError{
				field:  "Highlight",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetDatabase()) < 1 {
		err := QueryRequestValidationError{
			field:  "Database",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryRequestMultiError(errors)
	}

	return nil
}

// QueryRequestMultiError is an error wrapping multiple validation errors
// returned by QueryRequest.ValidateAll() if the designated constraints aren't met.
type QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRequestMultiError) AllErrors() []error { return m }

// QueryRequestValidationError is the validation error returned by
// QueryRequest.Validate if the designated constraints aren't met.
type QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRequestValidationError) ErrorName() string { return "QueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRequestValidationError{}

// Validate checks the field values on Highlight with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Highlight) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Highlight with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HighlightMultiError, or nil
// if none found.
func (m *Highlight) ValidateAll() error {
	return m.validate(true)
}

func (m *Highlight) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreTag

	// no validation rules for PostTag

	if len(errors) > 0 {
		return HighlightMultiError(errors)
	}

	return nil
}

// HighlightMultiError is an error wrapping multiple validation errors returned
// by Highlight.ValidateAll() if the designated constraints aren't met.
type HighlightMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HighlightMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HighlightMultiError) AllErrors() []error { return m }

// HighlightValidationError is the validation error returned by
// Highlight.Validate if the designated constraints aren't met.
type HighlightValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HighlightValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HighlightValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HighlightValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HighlightValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HighlightValidationError) ErrorName() string { return "HighlightValidationError" }

// Error satisfies the builtin error interface
func (e HighlightValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHighlight.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HighlightValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HighlightValidationError{}

// Validate checks the field values on IndexDoc with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexDoc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexDoc with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexDocMultiError, or nil
// if none found.
func (m *IndexDoc) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexDoc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := IndexDocValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Text

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexDocValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexDocValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexDocValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexDocMultiError(errors)
	}

	return nil
}

// IndexDocMultiError is an error wrapping multiple validation errors returned
// by IndexDoc.ValidateAll() if the designated constraints aren't met.
type IndexDocMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexDocMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexDocMultiError) AllErrors() []error { return m }

// IndexDocValidationError is the validation error returned by
// IndexDoc.Validate if the designated constraints aren't met.
type IndexDocValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexDocValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexDocValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexDocValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexDocValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexDocValidationError) ErrorName() string { return "IndexDocValidationError" }

// Error satisfies the builtin error interface
func (e IndexDocValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexDoc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexDocValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexDocValidationError{}

// Validate checks the field values on SingleIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleIndexRequestMultiError, or nil if none found.
func (m *SingleIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndexDoc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleIndexRequestValidationError{
					field:  "IndexDoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleIndexRequestValidationError{
					field:  "IndexDoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndexDoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleIndexRequestValidationError{
				field:  "IndexDoc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return SingleIndexRequestMultiError(errors)
	}

	return nil
}

// SingleIndexRequestMultiError is an error wrapping multiple validation errors
// returned by SingleIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type SingleIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleIndexRequestMultiError) AllErrors() []error { return m }

// SingleIndexRequestValidationError is the validation error returned by
// SingleIndexRequest.Validate if the designated constraints aren't met.
type SingleIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleIndexRequestValidationError) ErrorName() string {
	return "SingleIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SingleIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleIndexRequestValidationError{}

// Validate checks the field values on BatchIndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatchIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchIndexRequestMultiError, or nil if none found.
func (m *BatchIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIndexDocs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchIndexRequestValidationError{
						field:  fmt.Sprintf("IndexDocs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchIndexRequestValidationError{
						field:  fmt.Sprintf("IndexDocs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchIndexRequestValidationError{
					field:  fmt.Sprintf("IndexDocs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Database

	if len(errors) > 0 {
		return BatchIndexRequestMultiError(errors)
	}

	return nil
}

// BatchIndexRequestMultiError is an error wrapping multiple validation errors
// returned by BatchIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type BatchIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchIndexRequestMultiError) AllErrors() []error { return m }

// BatchIndexRequestValidationError is the validation error returned by
// BatchIndexRequest.Validate if the designated constraints aren't met.
type BatchIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchIndexRequestValidationError) ErrorName() string {
	return "BatchIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchIndexRequestValidationError{}

// Validate checks the field values on RemoveIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveIndexRequestMultiError, or nil if none found.
func (m *RemoveIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := RemoveIndexRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Database

	if len(errors) > 0 {
		return RemoveIndexRequestMultiError(errors)
	}

	return nil
}

// RemoveIndexRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveIndexRequestMultiError) AllErrors() []error { return m }

// RemoveIndexRequestValidationError is the validation error returned by
// RemoveIndexRequest.Validate if the designated constraints aren't met.
type RemoveIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIndexRequestValidationError) ErrorName() string {
	return "RemoveIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIndexRequestValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusResponseMultiError,
// or nil if none found.
func (m *StatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "Cup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "Cup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusResponseValidationError{
				field:  "Cup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusResponseValidationError{
				field:  "Disk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusResponseValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusResponseValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusResponseValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatusResponseMultiError(errors)
	}

	return nil
}

// StatusResponseMultiError is an error wrapping multiple validation errors
// returned by StatusResponse.ValidateAll() if the designated constraints
// aren't met.
type StatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusResponseMultiError) AllErrors() []error { return m }

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on CPU with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *CPU) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CPU with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CPUMultiError, or nil if none found.
func (m *CPU) ValidateAll() error {
	return m.validate(true)
}

func (m *CPU) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cores

	// no validation rules for ModelName

	// no validation rules for UsedPercent

	if len(errors) > 0 {
		return CPUMultiError(errors)
	}

	return nil
}

// CPUMultiError is an error wrapping multiple validation errors returned by
// CPU.ValidateAll() if the designated constraints aren't met.
type CPUMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CPUMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CPUMultiError) AllErrors() []error { return m }

// CPUValidationError is the validation error returned by CPU.Validate if the
// designated constraints aren't met.
type CPUValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CPUValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CPUValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CPUValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CPUValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CPUValidationError) ErrorName() string { return "CPUValidationError" }

// Error satisfies the builtin error interface
func (e CPUValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCPU.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CPUValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CPUValidationError{}

// Validate checks the field values on Disk with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Disk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Disk with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DiskMultiError, or nil if none found.
func (m *Disk) ValidateAll() error {
	return m.validate(true)
}

func (m *Disk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Free

	// no validation rules for FsType

	// no validation rules for Path

	// no validation rules for Total

	// no validation rules for Used

	// no validation rules for UsedPercent

	if len(errors) > 0 {
		return DiskMultiError(errors)
	}

	return nil
}

// DiskMultiError is an error wrapping multiple validation errors returned by
// Disk.ValidateAll() if the designated constraints aren't met.
type DiskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiskMultiError) AllErrors() []error { return m }

// DiskValidationError is the validation error returned by Disk.Validate if the
// designated constraints aren't met.
type DiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiskValidationError) ErrorName() string { return "DiskValidationError" }

// Error satisfies the builtin error interface
func (e DiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiskValidationError{}

// Validate checks the field values on Memory with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Memory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Memory with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemoryMultiError, or nil if none found.
func (m *Memory) ValidateAll() error {
	return m.validate(true)
}

func (m *Memory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Free

	// no validation rules for Self

	// no validation rules for Total

	// no validation rules for Used

	// no validation rules for UsedPercent

	if len(errors) > 0 {
		return MemoryMultiError(errors)
	}

	return nil
}

// MemoryMultiError is an error wrapping multiple validation errors returned by
// Memory.ValidateAll() if the designated constraints aren't met.
type MemoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryMultiError) AllErrors() []error { return m }

// MemoryValidationError is the validation error returned by Memory.Validate if
// the designated constraints aren't met.
type MemoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryValidationError) ErrorName() string { return "MemoryValidationError" }

// Error satisfies the builtin error interface
func (e MemoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryValidationError{}

// Validate checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *System) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SystemMultiError, or nil if none found.
func (m *System) ValidateAll() error {
	return m.validate(true)
}

func (m *System) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Os

	// no validation rules for Arch

	// no validation rules for Cores

	// no validation rules for Version

	// no validation rules for Goroutines

	// no validation rules for DataPath

	// no validation rules for DictionaryPath

	// no validation rules for Gomaxprocs

	// no validation rules for Shard

	// no validation rules for DataSize

	// no validation rules for Executable

	// no validation rules for Dbs

	// no validation rules for Pid

	// no validation rules for EnableAuth

	if len(errors) > 0 {
		return SystemMultiError(errors)
	}

	return nil
}

// SystemMultiError is an error wrapping multiple validation errors returned by
// System.ValidateAll() if the designated constraints aren't met.
type SystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemMultiError) AllErrors() []error { return m }

// SystemValidationError is the validation error returned by System.Validate if
// the designated constraints aren't met.
type SystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemValidationError) ErrorName() string { return "SystemValidationError" }

// Error satisfies the builtin error interface
func (e SystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemValidationError{}

// Validate checks the field values on Engine with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Engine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Engine with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EngineMultiError, or nil if none found.
func (m *Engine) ValidateAll() error {
	return m.validate(true)
}

func (m *Engine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IndexPath

	if all {
		switch v := interface{}(m.GetOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EngineValidationError{
					field:  "Option",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EngineValidationError{
					field:  "Option",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EngineValidationError{
				field:  "Option",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDebug

	// no validation rules for DatabaseName

	// no validation rules for Shard

	// no validation rules for Timeout

	// no validation rules for BuffNum

	if len(errors) > 0 {
		return EngineMultiError(errors)
	}

	return nil
}

// EngineMultiError is an error wrapping multiple validation errors returned by
// Engine.ValidateAll() if the designated constraints aren't met.
type EngineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EngineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EngineMultiError) AllErrors() []error { return m }

// EngineValidationError is the validation error returned by Engine.Validate if
// the designated constraints aren't met.
type EngineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngineValidationError) ErrorName() string { return "EngineValidationError" }

// Error satisfies the builtin error interface
func (e EngineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngineValidationError{}

// Validate checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Options with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OptionsMultiError, or nil if none found.
func (m *Options) ValidateAll() error {
	return m.validate(true)
}

func (m *Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvertedIndexName

	// no validation rules for PositiveIndexName

	// no validation rules for DocIndexName

	if len(errors) > 0 {
		return OptionsMultiError(errors)
	}

	return nil
}

// OptionsMultiError is an error wrapping multiple validation errors returned
// by Options.ValidateAll() if the designated constraints aren't met.
type OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OptionsMultiError) AllErrors() []error { return m }

// OptionsValidationError is the validation error returned by Options.Validate
// if the designated constraints aren't met.
type OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionsValidationError) ErrorName() string { return "OptionsValidationError" }

// Error satisfies the builtin error interface
func (e OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionsValidationError{}

// Validate checks the field values on WelcomeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WelcomeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WelcomeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WelcomeResponseMultiError, or nil if none found.
func (m *WelcomeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WelcomeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return WelcomeResponseMultiError(errors)
	}

	return nil
}

// WelcomeResponseMultiError is an error wrapping multiple validation errors
// returned by WelcomeResponse.ValidateAll() if the designated constraints
// aren't met.
type WelcomeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WelcomeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WelcomeResponseMultiError) AllErrors() []error { return m }

// WelcomeResponseValidationError is the validation error returned by
// WelcomeResponse.Validate if the designated constraints aren't met.
type WelcomeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WelcomeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WelcomeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WelcomeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WelcomeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WelcomeResponseValidationError) ErrorName() string { return "WelcomeResponseValidationError" }

// Error satisfies the builtin error interface
func (e WelcomeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWelcomeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WelcomeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WelcomeResponseValidationError{}

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRequestMultiError, or
// nil if none found.
func (m *EmptyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRequestMultiError(errors)
	}

	return nil
}

// EmptyRequestMultiError is an error wrapping multiple validation errors
// returned by EmptyRequest.ValidateAll() if the designated constraints aren't met.
type EmptyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRequestMultiError) AllErrors() []error { return m }

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on EmptyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyResponseMultiError, or
// nil if none found.
func (m *EmptyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyResponseMultiError(errors)
	}

	return nil
}

// EmptyResponseMultiError is an error wrapping multiple validation errors
// returned by EmptyResponse.ValidateAll() if the designated constraints
// aren't met.
type EmptyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyResponseMultiError) AllErrors() []error { return m }

// EmptyResponseValidationError is the validation error returned by
// EmptyResponse.Validate if the designated constraints aren't met.
type EmptyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyResponseValidationError) ErrorName() string { return "EmptyResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmptyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyResponseValidationError{}

// Validate checks the field values on OperationResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationResponseMultiError, or nil if none found.
func (m *OperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Message

	if len(errors) > 0 {
		return OperationResponseMultiError(errors)
	}

	return nil
}

// OperationResponseMultiError is an error wrapping multiple validation errors
// returned by OperationResponse.ValidateAll() if the designated constraints
// aren't met.
type OperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationResponseMultiError) AllErrors() []error { return m }

// OperationResponseValidationError is the validation error returned by
// OperationResponse.Validate if the designated constraints aren't met.
type OperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationResponseValidationError) ErrorName() string {
	return "OperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationResponseValidationError{}

// Validate checks the field values on DatabaseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DatabaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatabaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DatabaseRequestMultiError, or nil if none found.
func (m *DatabaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DatabaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DatabaseName

	if len(errors) > 0 {
		return DatabaseRequestMultiError(errors)
	}

	return nil
}

// DatabaseRequestMultiError is an error wrapping multiple validation errors
// returned by DatabaseRequest.ValidateAll() if the designated constraints
// aren't met.
type DatabaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseRequestMultiError) AllErrors() []error { return m }

// DatabaseRequestValidationError is the validation error returned by
// DatabaseRequest.Validate if the designated constraints aren't met.
type DatabaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseRequestValidationError) ErrorName() string { return "DatabaseRequestValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseRequestValidationError{}

// Validate checks the field values on WordCutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordCutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordCutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordCutRequestMultiError,
// or nil if none found.
func (m *WordCutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WordCutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyWord

	if len(errors) > 0 {
		return WordCutRequestMultiError(errors)
	}

	return nil
}

// WordCutRequestMultiError is an error wrapping multiple validation errors
// returned by WordCutRequest.ValidateAll() if the designated constraints
// aren't met.
type WordCutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordCutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordCutRequestMultiError) AllErrors() []error { return m }

// WordCutRequestValidationError is the validation error returned by
// WordCutRequest.Validate if the designated constraints aren't met.
type WordCutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordCutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordCutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordCutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordCutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordCutRequestValidationError) ErrorName() string { return "WordCutRequestValidationError" }

// Error satisfies the builtin error interface
func (e WordCutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordCutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordCutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordCutRequestValidationError{}

// Validate checks the field values on WordCutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WordCutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordCutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WordCutResponseMultiError, or nil if none found.
func (m *WordCutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WordCutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WordCutResponseMultiError(errors)
	}

	return nil
}

// WordCutResponseMultiError is an error wrapping multiple validation errors
// returned by WordCutResponse.ValidateAll() if the designated constraints
// aren't met.
type WordCutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordCutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordCutResponseMultiError) AllErrors() []error { return m }

// WordCutResponseValidationError is the validation error returned by
// WordCutResponse.Validate if the designated constraints aren't met.
type WordCutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordCutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordCutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordCutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordCutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordCutResponseValidationError) ErrorName() string { return "WordCutResponseValidationError" }

// Error satisfies the builtin error interface
func (e WordCutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordCutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordCutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordCutResponseValidationError{}

// Validate checks the field values on DatabaseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DatabaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatabaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DatabaseResponseMultiError, or nil if none found.
func (m *DatabaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DatabaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Len

	{
		sorted_keys := make([]string, len(m.GetDatabases()))
		i := 0
		for key := range m.GetDatabases() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDatabases()[key]
			_ = val

			// no validation rules for Databases[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DatabaseResponseValidationError{
							field:  fmt.Sprintf("Databases[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DatabaseResponseValidationError{
							field:  fmt.Sprintf("Databases[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DatabaseResponseValidationError{
						field:  fmt.Sprintf("Databases[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DatabaseResponseMultiError(errors)
	}

	return nil
}

// DatabaseResponseMultiError is an error wrapping multiple validation errors
// returned by DatabaseResponse.ValidateAll() if the designated constraints
// aren't met.
type DatabaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseResponseMultiError) AllErrors() []error { return m }

// DatabaseResponseValidationError is the validation error returned by
// DatabaseResponse.Validate if the designated constraints aren't met.
type DatabaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseResponseValidationError) ErrorName() string { return "DatabaseResponseValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseResponseValidationError{}
