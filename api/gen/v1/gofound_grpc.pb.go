// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: gofound.proto

package gofoundpd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GofoundServiceClient is the client API for GofoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GofoundServiceClient interface {
	Welcome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	GC(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	Status(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Index(ctx context.Context, in *SingleIndexRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	BatchIndex(ctx context.Context, in *BatchIndexRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	RemoveIndex(ctx context.Context, in *RemoveIndexRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	ShowDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DatabaseResponse, error)
	DropDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	CreateDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	WordCut(ctx context.Context, in *WordCutRequest, opts ...grpc.CallOption) (*WordCutResponse, error)
}

type gofoundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGofoundServiceClient(cc grpc.ClientConnInterface) GofoundServiceClient {
	return &gofoundServiceClient{cc}
}

func (c *gofoundServiceClient) Welcome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/Welcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) GC(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/GC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) Status(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) Index(ctx context.Context, in *SingleIndexRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) BatchIndex(ctx context.Context, in *BatchIndexRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/BatchIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) RemoveIndex(ctx context.Context, in *RemoveIndexRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/RemoveIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) ShowDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DatabaseResponse, error) {
	out := new(DatabaseResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/ShowDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) DropDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/DropDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) CreateDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofoundServiceClient) WordCut(ctx context.Context, in *WordCutRequest, opts ...grpc.CallOption) (*WordCutResponse, error) {
	out := new(WordCutResponse)
	err := c.cc.Invoke(ctx, "/gofound.v1.GofoundService/WordCut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GofoundServiceServer is the server API for GofoundService service.
// All implementations must embed UnimplementedGofoundServiceServer
// for forward compatibility
type GofoundServiceServer interface {
	Welcome(context.Context, *EmptyRequest) (*OperationResponse, error)
	GC(context.Context, *EmptyRequest) (*OperationResponse, error)
	Status(context.Context, *EmptyRequest) (*StatusResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Index(context.Context, *SingleIndexRequest) (*OperationResponse, error)
	BatchIndex(context.Context, *BatchIndexRequest) (*OperationResponse, error)
	RemoveIndex(context.Context, *RemoveIndexRequest) (*OperationResponse, error)
	ShowDatabase(context.Context, *EmptyRequest) (*DatabaseResponse, error)
	DropDatabase(context.Context, *DatabaseRequest) (*OperationResponse, error)
	CreateDatabase(context.Context, *DatabaseRequest) (*OperationResponse, error)
	WordCut(context.Context, *WordCutRequest) (*WordCutResponse, error)
	mustEmbedUnimplementedGofoundServiceServer()
}

// UnimplementedGofoundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGofoundServiceServer struct {
}

func (UnimplementedGofoundServiceServer) Welcome(context.Context, *EmptyRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Welcome not implemented")
}
func (UnimplementedGofoundServiceServer) GC(context.Context, *EmptyRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GC not implemented")
}
func (UnimplementedGofoundServiceServer) Status(context.Context, *EmptyRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedGofoundServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedGofoundServiceServer) Index(context.Context, *SingleIndexRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedGofoundServiceServer) BatchIndex(context.Context, *BatchIndexRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchIndex not implemented")
}
func (UnimplementedGofoundServiceServer) RemoveIndex(context.Context, *RemoveIndexRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIndex not implemented")
}
func (UnimplementedGofoundServiceServer) ShowDatabase(context.Context, *EmptyRequest) (*DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDatabase not implemented")
}
func (UnimplementedGofoundServiceServer) DropDatabase(context.Context, *DatabaseRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedGofoundServiceServer) CreateDatabase(context.Context, *DatabaseRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedGofoundServiceServer) WordCut(context.Context, *WordCutRequest) (*WordCutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WordCut not implemented")
}
func (UnimplementedGofoundServiceServer) mustEmbedUnimplementedGofoundServiceServer() {}

// UnsafeGofoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GofoundServiceServer will
// result in compilation errors.
type UnsafeGofoundServiceServer interface {
	mustEmbedUnimplementedGofoundServiceServer()
}

func RegisterGofoundServiceServer(s grpc.ServiceRegistrar, srv GofoundServiceServer) {
	s.RegisterService(&GofoundService_ServiceDesc, srv)
}

func _GofoundService_Welcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).Welcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/Welcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).Welcome(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_GC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).GC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/GC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).GC(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).Status(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).Index(ctx, req.(*SingleIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_BatchIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).BatchIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/BatchIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).BatchIndex(ctx, req.(*BatchIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_RemoveIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).RemoveIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/RemoveIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).RemoveIndex(ctx, req.(*RemoveIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_ShowDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).ShowDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/ShowDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).ShowDatabase(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/DropDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).DropDatabase(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).CreateDatabase(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GofoundService_WordCut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordCutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).WordCut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.v1.GofoundService/WordCut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).WordCut(ctx, req.(*WordCutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GofoundService_ServiceDesc is the grpc.ServiceDesc for GofoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GofoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gofound.v1.GofoundService",
	HandlerType: (*GofoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Welcome",
			Handler:    _GofoundService_Welcome_Handler,
		},
		{
			MethodName: "GC",
			Handler:    _GofoundService_GC_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _GofoundService_Status_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _GofoundService_Query_Handler,
		},
		{
			MethodName: "Index",
			Handler:    _GofoundService_Index_Handler,
		},
		{
			MethodName: "BatchIndex",
			Handler:    _GofoundService_BatchIndex_Handler,
		},
		{
			MethodName: "RemoveIndex",
			Handler:    _GofoundService_RemoveIndex_Handler,
		},
		{
			MethodName: "ShowDatabase",
			Handler:    _GofoundService_ShowDatabase_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _GofoundService_DropDatabase_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _GofoundService_CreateDatabase_Handler,
		},
		{
			MethodName: "WordCut",
			Handler:    _GofoundService_WordCut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gofound.proto",
}
